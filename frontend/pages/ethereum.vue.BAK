<template>
    <div>
        <button id="ethSignButton" @click="ethSign">eth_sign</button>
        <button id="personalSignButton" @click="personalSign">personal_sign</button>
        <button id="personalRecoverTest" @click="personalRecover">personal_ecRecover</button>
        <button id="ethjsPersonalSignButton">ethjs personal sign</button>
        <button id="signTypedDataButton">sign typed data</button>
    </div>
</template>

<script>
var ethUtil = require('ethereumjs-util')
var sigUtil = require('eth-sig-util')

// var Web3 = require('web3');

var web3 = window.web3
if (window.web3 !== undefined) {
  // web3 = new Web3(web3.currentProvider);
} else {
  // set the provider you want from Web3.providers
  // web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
  console.log('web3 undefine')
}

var terms = 'test'

export default {
  methods: {
    ethSign: function (event) {
      var msg = '0x879a053d4800c6354e76c7985a865d2922c82fb5b3f4577b2fe08b998954f2e0'
      var from = web3.eth.accounts[0]
      web3.eth.sign(from, msg, function (err, result) {
        if (err) return console.error(err)
        console.log('SIGNED:' + result)
      })
    },

    personalSign: function (event) {
      var text = terms
      var msg = ethUtil.bufferToHex(Buffer.from(text, 'utf8'))
      // var msg = '0x1' // hexEncode(text)
      console.log(msg)
      var from = web3.eth.accounts[0]
      /*  web3.personal.sign not yet implemented!!!
       *  We're going to have to assemble the tx manually!
       *  This is what it would probably look like, though:
        web3.personal.sign(msg, from) function (err, result) {
          if (err) return console.error(err)
          console.log('PERSONAL SIGNED:' + result)
        })
      */
      console.log('CLICKED, SENDING PERSONAL SIGN REQ')
      var params = [msg, from]
      var method = 'personal_sign'
      web3.currentProvider.sendAsync({
        method,
        params,
        from
      }, function (err, result) {
        if (err) return console.error(err)
        if (result.error) return console.error(result.error)
        console.log('PERSONAL SIGNED:' + JSON.stringify(result.result))
        console.log('recovering...')
        const msgParams = { data: msg }
        msgParams.sig = result.result
        console.dir({ msgParams })
        const recovered = sigUtil.recoverPersonalSignature(msgParams)
        console.dir({ recovered })
        if (recovered === from) {
          console.log('SigUtil Successfully verified signer as ' + from)
        } else {
          console.dir(recovered)
          console.log('SigUtil Failed to verify signer when comparing ' + recovered.result + ' to ' + from)
          console.log('Failed, comparing %s to %s', recovered, from)
        }
        /*
        method = 'personal_ecRecover'
        var params = [msg, result.result]
        web3.currentProvider.sendAsync({
          method,
          params,
          from,
        }, function (err, recovered) {
          console.dir({ err, recovered })
          if (err) return console.error(err)
          if (result.error) return console.error(result.error)
          if (result.result === from ) {
            console.log('Successfully verified signer as ' + from)
          } else {
            console.log('Failed to verify signer when comparing ' + result.result + ' to ' + from)
          }
        })
        */
      })
    },

    personalRecover: function(event) {
      var text = terms
      var msg = ethUtil.bufferToHex(Buffer.from(text, 'utf8'))
      // var msg = '0x1' // hexEncode(text)
      console.log(msg)
      var from = web3.eth.accounts[0]

      /*  web3.personal.sign not yet implemented!!!
      *  We're going to have to assemble the tx manually!
      *  This is what it would probably look like, though:
        web3.personal.sign(msg, from) function (err, result) {
          if (err) return console.error(err)
          console.log('PERSONAL SIGNED:' + result)
        })
      */

      console.log('CLICKED, SENDING PERSONAL SIGN REQ')
      var params = [msg, from]
      var method = 'personal_sign'

      web3.currentProvider.sendAsync({
        method,
        params,
        from,
      }, function (err, result) {
        if (err) return console.error(err)
        if (result.error) return console.error(result.error)
        console.log('PERSONAL SIGNED:' + JSON.stringify(result.result))

        console.log('recovering...')
        const msgParams = { data: msg }
        msgParams.sig = result.result

        method = 'personal_ecRecover'
        var params = [msg, result.result]
        web3.currentProvider.sendAsync({
          method,
          params,
          from,
        }, function (err, result) {
          var recovered = result.result
          console.log('ec recover called back:')
          console.dir({ err, recovered })
          if (err) return console.error(err)
          if (result.error) return console.error(result.error)


          if (recovered === from ) {
            console.log('Successfully ecRecovered signer as ' + from)
          } else {
            console.log('Failed to verify signer when comparing ' + result + ' to ' + from)
          }

        })
      })

    }
  }
}
</script>
